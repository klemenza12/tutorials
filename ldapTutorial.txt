CN = infomon Name
OU = Organizational Unit
DC = Domain infoponent

1. yum install openldap*
2. slapppasswd
	you need to copy above generated password(hash) to text
3. open 
	vi /etc/openldap/slapd.d/cn\=config/olcDatabase\=\{2\}bdb.ldif 

	and change with the following:

	olcSuffix: dc=linuxoperatingsystem,dc=info
 	olcRootDN: cn=Admin,dc=linuxoperatingsystem,dc=info
	add: 
	olcRootPW: <paste encrypted="" here="" password="" your=""> ( copy password at step 2 ) (it will look like olcRootPW: (SSHA)Daskjfdshregfdguidfsgsdglkfjd73432j)
 	olcTLSCertificateFile: /etc/pki/tls/certs/linuxoperatingsystem.pem
	olcTLSCertificateKeyFile: /etc/pki/tls/certs/linuxoperatingsystemkey.pem

4. open 
	vi /etc/openldap/slapd.d/cn\=config/olcDatabase\=\{1\}monitor.ldif

	find olcAccess and change with
	
	"cn=Admin,dc=linuxoperatingsystem,dc=info"

5. Copy the sample database file
	cp /usr/share/openldap-servers/DB_CONFIG.example /var/lib/ldap/DB_CONFIG
	chown -R ldap:ldap /var/lib/ldap/

6. Edit the file 
	vi /etc/sysconfig/ldap
	SLAPD_LDAPS=yes #(default is no)

7. We need to create a certificate for ldap Server
	openssl req -new -x509 -nodes -out /etc/pki/tls/certs/linuxoperatingsystem.pem -keyout /etc/pki/tls/certs/linuxoperatingsystemkey.pem -days 365

	US
	Phan Van Huu
	US
	linuxoperatingsystem
	US
	localhost
	huu@linuxoperatingsystem.info
	

8. We need to change owner and group ownership of certificate and keyfile
	chown -Rf root:ldap /etc/pki/tls/certs/linuxoperatingsystem.pem
 	chown -Rf root:ldap /etc/pki/tls/certs/linuxoperatingsystemkey.pem

9. Start/Restart service ldap
	service slapd restart
	chkconfig slapd on

10. Now we need to create base objects in OpenLdap (manually or with migration tools)
	yum install migrationtools
	cd /usr/share/migrationtools/
  	vi migrate_common.ph	 

	change on the line 71 (:71)
	$DEFAULT_MAIL_DOMAIN = "linuxoperationsystem.info";

	line 74 (:74)
	$DEFAULT_BASE = "dc=linuxoperatingsystem,dc=info";
	
	line 90 (:90)
	$EXTENDED_SCHEMA = 1;

   	cd /usr/share/migrationtools/
	vi migrate_common.ph


	$NETINFOBRIDGE = (-x "/usr/sbin/mkslapdconf");

	if ($NETINFOBRIDGE) {
		$NAMINGCONTEXT{'aliases'}           = "cn=aliases";
	#       $NAMINGCONTEXT{'fstab'}             = "cn=mounts";
		$NAMINGCONTEXT{'passwd'}            = "cn=users";
		$NAMINGCONTEXT{'netgroup_byuser'}   = "cn=netgroup.byuser";
		$NAMINGCONTEXT{'netgroup_byhost'}   = "cn=netgroup.byhost";
		$NAMINGCONTEXT{'group'}             = "cn=groups";
		$NAMINGCONTEXT{'Itgroup'}           = "cn=ItGroups";
		$NAMINGCONTEXT{'Salesgroup'}        = "cn=SalesGroups";
	#       $NAMINGCONTEXT{'netgroup'}          = "cn=netgroup";
	#       $NAMINGCONTEXT{'hosts'}             = "cn=machines";
	#       $NAMINGCONTEXT{'networks'}          = "cn=networks";
	#       $NAMINGCONTEXT{'protocols'}         = "cn=protocols";
	#       $NAMINGCONTEXT{'rpc'}               = "cn=rpcs";
	#       $NAMINGCONTEXT{'services'}          = "cn=services";
	} else {
		$NAMINGCONTEXT{'aliases'}           = "ou=Aliases";
	#       $NAMINGCONTEXT{'fstab'}             = "ou=Mounts";
		$NAMINGCONTEXT{'passwd'}            = "ou=People";
	#       $NAMINGCONTEXT{'netgroup_byuser'}   = "nisMapName=netgroup.byuser";
	#       $NAMINGCONTEXT{'netgroup_byhost'}   = "nisMapName=netgroup.byhost";
		$NAMINGCONTEXT{'group'}             = "ou=Group";
		$NAMINGCONTEXT{'Itgroup'}           = "ou=ItGroup";
		$NAMINGCONTEXT{'Salesgroup'}        = "ou=SalesGroup";
	#       $NAMINGCONTEXT{'netgroup'}          = "ou=Netgroup";
	#       $NAMINGCONTEXT{'hosts'}             = "ou=Hosts";
	#       $NAMINGCONTEXT{'networks'}          = "ou=Networks";
	#       $NAMINGCONTEXT{'protocols'}         = "ou=Protocols";
	#       $NAMINGCONTEXT{'rpc'}               = "ou=Rpc";
	#       $NAMINGCONTEXT{'services'}          = "ou=Services";
	}

	# Default DNS domain
	$DEFAULT_MAIL_DOMAIN = "linuxoperatingsystem.info";

	# Default base 
	$DEFAULT_BASE = "dc=linuxoperatingsystem,dc=info";



	we are creating local user and groups and migrate them to ldap
	
        useradd -d /home/ldapuser1 ldapuser1
        useradd -d /home/ldapuser2 ldapuser2
        passwd ldapuser1
        passwd ldapuser2

  	getent passwd | tail -n 2 > /root/users
  	getent shadow | tail -n 2 > /root/passwords
  	getent group | tail -n 2 > /root/groups

	vi migrate_passwd.pl
	inside the file search for /etc/shadow and change it with /root/passwords and save

	generate a base.ldif for your domain
	./migrate_base.pl > /root/base.ldif

	generate ldif file for users
	./migrate_passwd.pl /root/users > /root/users.ldif

	generate ldif file for groups
	./migrate_group.pl /root/groups > /root/groups.ldif

	it is time to upload this ldif on ldap server
	ldapadd -x -W -D "cn=Admin,dc=linuxoperatingsystem,dc=info" -f /root/base.ldif
        ldapadd -x -W -D "cn=Admin,dc=linuxoperatingsystem,dc=info" -f /root/users.ldif
        ldapadd -x -W -D "cn=Admin,dc=linuxoperatingsystem,dc=info" -f /root/groups.ldif


	enable lod openladp server
	vi /etc/rsyslog.conf
	add the following line

	#LDAP
	local4.* /var/log/ldap.log

	restart Rsyslog server
	/etc/init.d/rsyslog restart
	
	restart openldap server
	/etc/init.d/slapd restart
	
	now we can use ldapsearch command
	ldapsearch -x -b "dc=linuxoperatingsystem,dc=info"

	test and connect to the server in the direcotory you will find windows program for testing ldap (LdapAdminExe-w64-1.7.2)

        something for testing 
	yum install telnet
        telnet localhost 636
        telnet 192.168.1.110 636
	lsof | grep ldap
        ps -afux | grep ldap
 	lsof | grep 389
        service iptables stop
        netstat -ntpl
	ldapsearch -H ldaps://localhost:636
        ldapsearch -H ldaps://myserver:636
        ldapsearch -H ldaps://192.168.1.110:636
	iptables -A INPUT -p tcp -m tcp --dport 636 -j ACCEPT
        netstat -ntpl
        service iptables restart
        iptables -A INPUT -p tcp -m tcp --dport 389 -j ACCEPT
        service iptables restart
        iptables INPUT -m state --state NEW -m tcp -p tcp --dport 389 -j ACCEPT
        iptables INPUT -p tcp -m tcp --dport 389 -j ACCEPT
        iptables INPUT -m state --state NEW -m tcp -p tcp --dport 389 -j ACCEPT
        iptables -A INPUT -m state --state NEW -m tcp -p tcp --dport 389 -j ACCEPT
        iptables -A INPUT -m state --state NEW -m tcp -p tcp --dport 636 -j ACCEPT
        iptables -A INPUT -m state --state NEW -m tcp -p tcp --dport 9830 -j ACCEPT
        service iptables restart

	

	







































	
